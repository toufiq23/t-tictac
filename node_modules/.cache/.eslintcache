[{"/home/toufiq/coding/online_tuto_sites/react_boilerplate/src/index.js":"1","/home/toufiq/coding/online_tuto_sites/react_boilerplate/src/App.js":"2","/home/toufiq/coding/online_tuto_sites/UDEMY/frontEnd/react_hooks_patel/PROJECTs/Tic_Tac_Game/src/index.js":"3","/home/toufiq/coding/online_tuto_sites/UDEMY/frontEnd/react_hooks_patel/PROJECTs/Tic_Tac_Game/src/App.js":"4"},{"size":218,"mtime":1626471007384,"results":"5","hashOfConfig":"6"},{"size":157,"mtime":1633293423488,"results":"7","hashOfConfig":"6"},{"size":218,"mtime":1626471007384,"results":"8","hashOfConfig":"9"},{"size":2375,"mtime":1633907245481,"results":"10","hashOfConfig":"9"},{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"o1ns2y",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"11e39ma",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"/home/toufiq/coding/online_tuto_sites/react_boilerplate/src/index.js",[],["22","23"],"/home/toufiq/coding/online_tuto_sites/react_boilerplate/src/App.js",[],"/home/toufiq/coding/online_tuto_sites/UDEMY/frontEnd/react_hooks_patel/PROJECTs/Tic_Tac_Game/src/index.js",[],["24","25"],"/home/toufiq/coding/online_tuto_sites/UDEMY/frontEnd/react_hooks_patel/PROJECTs/Tic_Tac_Game/src/App.js",["26","27"],"import React, {useState, useEffect} from 'react'\nimport \"./App.css\"\n\nconst initMatrix = []\nfunction App() {\n\n\tconst[matrix, setMatrix] = useState(initMatrix)\n\tconst [matrixSize, setMatrixSize] = useState(4)\n\tconst [currentPlayer, setCurrentPlayer] = useState(\"o\")\n\tconst [selRow, setSelRow] = useState(null)\n\tconst [selColumn, setSelColumn] = useState(null)\n\tconst [winner, setWinner] = useState(false)\n\tconst [reset, setReset] = useState(false)\n\n\tuseEffect(() => {\n\t\tsetWinner(false)\n\t\tsetSelColumn(null)\n\t\tsetSelRow(null)\n\t\tconst row = new Array(matrixSize).fill(null)\n\n\t\tconst tempMatrix = []\n\n\t\tfor(let i=0; i<matrixSize; i++){\n\t\t\ttempMatrix.push([...row])\n\t\t}\n\t\tsetMatrix(tempMatrix)\n\t}, [reset])\n\n\tfunction squareClick (row, column) {\n\t\tif(!matrix[row][column] && !winner){\n\t\t\tsetSelColumn(column)\n\t\t\tsetSelRow(row)\n\t\t\tlet nextPlayer = currentPlayer === \"x\" ? \"o\" : \"x\"\n\t\t\tsetCurrentPlayer(nextPlayer)\n\t\t\tconst matrixCopy = [...matrix]\n\t\t\tmatrixCopy[row][column] = nextPlayer;\n\t\t\tsetMatrix(matrixCopy)\n\t\t}\n\t}\n\n\tfunction isWinner(){\n\t\tlet vertical = true\n\t\tlet horizontal = true\n\t\tlet d1 = true\n\t\tlet d2 = true\n\n\t\tif(selColumn === null || selRow === null){\n\t\t\treturn\n\t\t}\n\n\t\tfor(let i=0; i<matrixSize; i++){\n\t\t\tif(matrix[i][selColumn] !== currentPlayer){\n\t\t\t\tvertical = false\n\t\t\t}\n\t\t\tif(matrix[selRow][i] !== currentPlayer){\n\t\t\t\thorizontal = false\n\t\t\t}\n\t\t\tif(matrix[i][i] !== currentPlayer){\n\t\t\t\td1 = false\n\t\t\t}\n\t\t\tif(matrix[i][matrixSize - i - 1] !== currentPlayer){\n\t\t\t\td2 = false\n\t\t\t}\n\t\t}\n\t\tif(vertical || horizontal || d1 || d2){\n\t\t\tsetWinner(true)\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif(!winner){\n\t\t\tisWinner()\n\t\t}\n\t})\n\n\tfunction resetGame(){\n\t\tsetReset(!reset)\n\t}\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\t\t\t<button onClick={resetGame}>Reset Game</button>\n\t\t\t\t<div>\n\t\t\t\t\t{\n\t\t\t\t\t\tmatrix.map((val, column) => (\n\t\t\t\t\t\t\t<div className=\"column\">\n\t\t\t\t\t\t\t\t{val.map((val1, row) => (\n\t\t\t\t\t\t\t\t\t<div onClick={() => {squareClick(row, column)}} className=\"row\">\n\t\t\t\t\t\t\t\t\t\t{matrix[row][column]}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<h2>{winner ? `Player ${currentPlayer} is a winner` : \"\"}</h2>\n\t\t\t\n\t\t\t\t<div className=\"footer\">\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<h2>Thanks for your visit.</h2>\n\t\t\t\t\t\t<h3>Created by M Toufiq ELAHI</h3>\n\t\t\t\t\t</div> \n\t\t\t\t</div>\n\t\t\t</header>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"28","replacedBy":"32"},{"ruleId":"30","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":8,"column":21,"nodeType":"36","messageId":"37","endLine":8,"endColumn":34},{"ruleId":"38","severity":1,"message":"39","line":27,"column":5,"nodeType":"40","endLine":27,"endColumn":12,"suggestions":"41"},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],["42"],["43"],"no-unused-vars","'setMatrixSize' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'matrixSize'. Either include it or remove the dependency array.","ArrayExpression",["44"],"no-global-assign","no-unsafe-negation",{"desc":"45","fix":"46"},"Update the dependencies array to be: [matrixSize, reset]",{"range":"47","text":"48"},[693,700],"[matrixSize, reset]"]